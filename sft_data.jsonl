{"prompt": "用Python实现二分查找算法", "response": "以下是Python实现的二分查找算法：\n\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# 示例用法\narr = [2, 3, 4, 10, 40]\ntarget = 10\nresult = binary_search(arr, target)\nprint(f'元素在数组中的索引为 {result}' if result != -1 else '元素不在数组中')"}
{"prompt": "编写一个函数，将列表中的元素去重并保持原顺序", "response": "以下是一个保持原顺序的列表去重函数：\n\ndef deduplicate_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\n# 示例\nmy_list = [1, 2, 2, 3, 3, 3, 4]\nprint(deduplicate_list(my_list))  # 输出: [1, 2, 3, 4]"}
{"prompt": "用Python实现一个简单的栈数据结构", "response": "以下是使用Python列表实现的栈数据结构：\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    # 入栈\n    def push(self, item):\n        self.items.append(item)\n\n    # 出栈\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        raise IndexError(\"pop from empty stack\")\n\n    # 获取栈顶元素\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        raise IndexError(\"peek from empty stack\")\n\n    # 检查栈是否为空\n    def is_empty(self):\n        return len(self.items) == 0\n\n    # 获取栈的大小\n    def size(self):\n        return len(self.items)\n\n# 示例用法\nstack = Stack()\nstack.push(1)\nstack.push(2)\nprint(stack.peek())  # 输出: 2\nprint(stack.pop())   # 输出: 2\nprint(stack.size())  # 输出: 1"}
{"prompt": "如何用Python读取CSV文件并转换为字典列表？", "response": "可以使用Python标准库的csv模块来读取CSV文件并转换为字典列表：\n\nimport csv\n\ndef csv_to_dict_list(csv_file):\n    with open(csv_file, mode='r', encoding='utf-8') as file:\n        # 使用csv.DictReader读取，自动将第一行作为键\n        csv_reader = csv.DictReader(file)\n        # 转换为列表\n        dict_list = list(csv_reader)\n    return dict_list\n\n# 示例用法\n# 假设CSV文件内容:\n# name,age,city\n# Alice,30,New York\n# Bob,25,Los Angeles\n\nresult = csv_to_dict_list('people.csv')\nprint(result)\n# 输出:\n# [\n#   {'name': 'Alice', 'age': '30', 'city': 'New York'},\n#   {'name': 'Bob', 'age': '25', 'city': 'Los Angeles'}\n# ]"}
{"prompt": "编写一个函数，计算列表中所有元素的乘积", "response": "以下是计算列表中所有元素乘积的函数：\n\ndef list_product(lst):\n    # 处理空列表情况\n    if not lst:\n        return 0\n    \n    product = 1\n    for num in lst:\n        product *= num\n    return product\n\n# 示例用法\nprint(list_product([1, 2, 3, 4]))  # 输出: 24\nprint(list_product([5, -3, 2]))   # 输出: -30\nprint(list_product([]))           # 输出: 0"}
{"prompt": "用Python实现冒泡排序算法", "response": "以下是Python实现的冒泡排序算法：\n\ndef bubble_sort(arr):\n    n = len(arr)\n    # 外层循环控制需要进行多少轮比较\n    for i in range(n):\n        # 内层循环控制每轮比较的元素范围\n        # 每完成一轮，最大的元素会\"浮\"到末尾，所以可以减少一次比较\n        for j in range(0, n-i-1):\n            # 如果当前元素大于下一个元素，则交换它们\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# 示例用法\nmy_list = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(my_list)\nprint(\"排序后的列表:\", my_list)  # 输出: [11, 12, 22, 25, 34, 64, 90]"}
{"prompt": "如何在Python中实现单例模式？", "response": "在Python中实现单例模式的常用方法有多种，以下是一种简洁的实现：\n\nclass Singleton:\n    _instance = None\n    \n    def __new__(cls, *args, **kwargs):\n        # 如果实例不存在，则创建新实例\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        # 返回已有的实例\n        return cls._instance\n\n# 示例用法\nclass MyClass(Singleton):\n    def __init__(self, value):\n        self.value = value\n\n# 测试是否为同一个实例\nobj1 = MyClass(10)\nobj2 = MyClass(20)\n\nprint(obj1 is obj2)  # 输出: True\nprint(obj1.value)    # 输出: 10 (注意第二个实例的初始化参数被忽略)\nprint(obj2.value)    # 输出: 10"}
{"prompt": "编写一个函数，检查一个数是否为素数", "response": "以下是检查一个数是否为素数的函数：\n\ndef is_prime(n):\n    # 处理小于2的数\n    if n <= 1:\n        return False\n    # 处理2和3\n    if n <= 3:\n        return True\n    # 处理能被2或3整除的数\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    # 检查到sqrt(n)，步长为6\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w  # 交替加2和4 (5+2=7, 7+4=11, 11+2=13, ...)\n    return True\n\n# 示例用法\nprint(is_prime(17))  # 输出: True\nprint(is_prime(15))  # 输出: False\nprint(is_prime(2))   # 输出: True"}
{"prompt": "用Python实现一个简单的队列数据结构", "response": "以下是使用Python列表实现的队列数据结构：\n\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    # 入队\n    def enqueue(self, item):\n        self.items.append(item)\n\n    # 出队\n    def dequeue(self):\n        if not self.is_empty():\n            return self.items.pop(0)\n        raise IndexError(\"dequeue from empty queue\")\n\n    # 获取队首元素\n    def front(self):\n        if not self.is_empty():\n            return self.items[0]\n        raise IndexError(\"front from empty queue\")\n\n    # 检查队列是否为空\n    def is_empty(self):\n        return len(self.items) == 0\n\n    # 获取队列的大小\n    def size(self):\n        return len(self.items)\n\n# 示例用法\nqueue = Queue()\nqueue.enqueue(1)\nqueue.enqueue(2)\nprint(queue.front())  # 输出: 1\nprint(queue.dequeue()) # 输出: 1\nprint(queue.size())   # 输出: 1"}
{"prompt": "如何用Python发送HTTP POST请求并处理JSON响应？", "response": "可以使用requests库发送HTTP POST请求并处理JSON响应：\n\n首先需要安装requests库：pip install requests\n\n示例代码：\nimport requests\nimport json\n\ndef send_post_request(url, data):\n    try:\n        # 发送POST请求，自动将字典转换为JSON\n        response = requests.post(\n            url, \n            json=data, \n            headers={'Content-Type': 'application/json'}\n        )\n        \n        # 检查请求是否成功\n        response.raise_for_status()\n        \n        # 解析JSON响应\n        return response.json()\n        \n    except requests.exceptions.HTTPError as e:\n        print(f\"HTTP错误: {e}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"请求异常: {e}\")\n    except json.JSONDecodeError:\n        print(\"无法解析响应为JSON\")\n    return None\n\n# 示例用法\napi_url = 'https://api.example.com/data'\npayload = {'name': 'John', 'age': 30, 'city': 'New York'}\n\nresponse_data = send_post_request(api_url, payload)\nif response_data:\n    print(\"响应数据:\", response_data)"}
    