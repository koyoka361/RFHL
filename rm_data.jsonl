{"prompt": "用Python实现二分查找算法", "response": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "score": 0.9}
{"prompt": "用Python实现二分查找算法", "response": "def find_number(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "score": 0.3}
{"prompt": "编写一个函数，将列表中的元素去重并保持原顺序", "response": "def deduplicate_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "score": 0.85}
{"prompt": "编写一个函数，将列表中的元素去重并保持原顺序", "response": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "score": 0.95}
{"prompt": "用Python实现一个简单的栈数据结构", "response": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def peek(self):\n        return self.items[-1]\n    def is_empty(self):\n        return len(self.items) == 0", "score": 0.8}
{"prompt": "用Python实现一个简单的栈数据结构", "response": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def add(self, item):\n        self.stack.insert(0, item)\n    def get(self):\n        return self.stack.pop(0)\n    def check(self):\n        return self.stack[0]", "score": 0.4}
{"prompt": "如何用Python读取CSV文件并转换为字典列表？", "response": "import csv\n\ndef csv_to_dict(csv_file):\n    with open(csv_file, 'r') as f:\n        reader = csv.DictReader(f)\n        return list(reader)", "score": 0.9}
{"prompt": "如何用Python读取CSV文件并转换为字典列表？", "response": "import pandas as pd\n\ndef read_csv_to_dict(filename):\n    df = pd.read_csv(filename)\n    return df.to_dict('records')", "score": 0.8}
{"prompt": "编写一个函数，计算列表中所有元素的乘积", "response": "def multiply_elements(lst):\n    if not lst:\n        return 0\n    product = 1\n    for num in lst:\n        product *= num\n    return product", "score": 0.85}
{"prompt": "编写一个函数，计算列表中所有元素的乘积", "response": "def list_product(lst):\n    return eval('*'.join(map(str, lst))) if lst else 0", "score": 0.5}
{"prompt": "用Python实现冒泡排序算法", "response": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "score": 0.9}
{"prompt": "用Python实现冒泡排序算法", "response": "def sort_list(arr):\n    return sorted(arr)", "score": 0.2}
{"prompt": "如何在Python中实现单例模式？", "response": "class Singleton:\n    _instance = None\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance", "score": 0.85}
{"prompt": "如何在Python中实现单例模式？", "response": "class Singleton:\n    instance = None\n    def __init__(self):\n        if not Singleton.instance:\n            Singleton.instance = self", "score": 0.4}
{"prompt": "编写一个函数，检查一个数是否为素数", "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "score": 0.9}
{"prompt": "编写一个函数，检查一个数是否为素数", "response": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "score": 0.6}
{"prompt": "用Python实现一个简单的队列数据结构", "response": "class Queue:\n    def __init__(self):\n        self.items = []\n    def enqueue(self, item):\n        self.items.append(item)\n    def dequeue(self):\n        return self.items.pop(0)\n    def front(self):\n        return self.items[0]\n    def is_empty(self):\n        return len(self.items) == 0", "score": 0.85}
{"prompt": "用Python实现一个简单的队列数据结构", "response": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def add(self, item):\n        self.queue.append(item)\n    def remove(self):\n        return self.queue.pop(0)", "score": 0.6}
{"prompt": "如何用Python发送HTTP POST请求并处理JSON响应？", "response": "import requests\n\ndef send_post(url, data):\n    try:\n        response = requests.post(url, json=data)\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f'Error: {e}')\n        return None", "score": 0.9}
{"prompt": "如何用Python发送HTTP POST请求并处理JSON响应？", "response": "import urllib.request\nimport json\n\ndef post_data(url, data):\n    data = json.dumps(data).encode()\n    req = urllib.request.Request(url, data=data, headers={'Content-Type': 'application/json'})\n    with urllib.request.urlopen(req) as f:\n        return json.loads(f.read().decode())", "score": 0.7}
    